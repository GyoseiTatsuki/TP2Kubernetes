name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  release:
    types: [created] # Déploiement uniquement lors d'une release (tag)

env:
  IMAGE_NAME: IMAGE_NAME: ghcr.io/${{ github.repository }}/projet-tp2-kubernetes:latest



jobs:
  # Étape Build
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  # Étape Deploy
  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' # Déploiement uniquement pour une release
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.K8S_CA_CERT }}" | base64 --decode > ca.crt
          kubectl config set-cluster my-cluster --server=${{ secrets.K8S_API_URL }} --certificate-authority=ca.crt
          kubectl config set-credentials deployer --token=${{ secrets.K8S_TOKEN }}
          kubectl config set-context my-context --cluster=my-cluster --user=deployer
          kubectl config use-context my-context

      - name: Deploy to Kubernetes
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --docker-email=unused@example.com --dry-run=client -o yaml | kubectl apply -f -

          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
